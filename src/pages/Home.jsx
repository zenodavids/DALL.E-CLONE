//import React, useEffect, and useState from the React library
import React, { useEffect, useState } from 'react'

//import the Card, FormField, and Loader components from the components file
import { Card, FormField, Loader } from '../components'

//declare a RenderCards function that takes an object with data and title as the argument
const RenderCards = ({ data, title }) => {
  //if the length of the data array is greater than 0, return the data mapped over a Card component
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />)
  }
  //otherwise, return an h2 element with the given title
  return (
    <h2 className='mt-5 font-bold text-[#6469ff] text-xl uppercase'>{title}</h2>
  )
}

//declare a Home function that returns some jsx
const Home = () => {
  //declare a loading state and set it to false
  const [loading, setLoading] = useState(false)
  //declare an allPosts state and set it to null
  const [allPosts, setAllPosts] = useState(null)

  //declare a searchText state and set it to an empty string
  const [searchText, setSearchText] = useState('')
  //declare a searchTimeout state and set it to null
  const [searchTimeout, setSearchTimeout] = useState(null)
  //declare a searchedResults state and set it to null
  const [searchedResults, setSearchedResults] = useState(null)

  //declare an async fetchPosts function
  const fetchPosts = async () => {
    //set the loading state to true
    setLoading(true)

    try {
      //make a GET request to the given url and set the Content-Type to application/json
      const response = await fetch(
        'https://dalle-arbb.onrender.com/api/v1/post',
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )

      //if the response is ok, set the result of the response to the allPosts state
      if (response.ok) {
        const result = await response.json()
        setAllPosts(result.data.reverse())
      }
    } catch (err) {
      //otherwise, alert the error
      alert(err)
    } finally {
      //finally, set the loading state to false
      setLoading(false)
    }
  }

  //use the useEffect hook to call the fetchPosts function
  useEffect(() => {
    fetchPosts()
  }, [])

  //declare a handleSearchChange function that takes an event as an argument
  const handleSearchChange = (e) => {
    //clear the searchTimeout state
    clearTimeout(searchTimeout)
    //set the searchText state to the value of the event target
    setSearchText(e.target.value)

    //set the searchTimeout state to a setTimeout that filters allPosts and sets the searchedResults state
    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        )
        setSearchedResults(searchResult)
      }, 500)
    )
  }

  //return some jsx
  return (
    <section className='max-w-7xl mx-auto'>
      <div>
        <h1 className='font-extrabold text-[#222328] text-[32px]'>
          The Community Showcase
        </h1>
        <p className='mt-2 text-[#666e75] text-[14px] max-w-[500px]'>
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI
        </p>
      </div>

      <div className='mt-16'>
        {/* render a FormField component with the given props */}
        <FormField
          labelName='Search posts'
          type='text'
          name='text'
          placeholder='Search something...'
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className='mt-10'>
        {/* check if loading is true, if so render a Loader component, else render the searched or allPosts data mapped over a Card component */}
        {loading ? (
          <div className='flex justify-center items-center'>
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className='font-medium text-[#666e75] text-xl mb-3'>
                Showing Resuls for{' '}
                <span className='text-[#222328]'>{searchText}</span>:
              </h2>
            )}
            <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title='No Search Results Found'
                />
              ) : (
                <RenderCards data={allPosts} title='No Posts Yet' />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  )
}

export default Home
